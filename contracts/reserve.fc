;; equivalent of sending a message with x TONs
const int reserve::this_amount = 0;
;; equivalent of sending a message with almost whole balance but leaving x TONs, and if not enough - throw error
const int reserve::leave_this_amount = 1;
;; equivalent of sending a message with x TONs, and if not enough - don't throw error. but (!) if you will try to send something from it - will throw.
const int reserve::at_most_this_amount = 2;
;; equivalent of sending a message with almost whole balance but leaving x TONs, and if balance is less than x - do nothing
const int reserve::leave_max_this_amount = 3;
;; equivalent of sending a message with (balance before msg + x) TONs
const int reserve::bbalance_plus_this_amount = 4;
;; equivalent of leaving on contract (balance before msg + x) TONs and sending a message with the rest
const int reserve::leave_bbalance_plus_this_amount = 5;
;; equivalent of sending a message with (balance before msg - x) TONs
const int reserve::bbalance_minus_this_amount = 12;
;; equivalent of leaving on contract (balance before msg - x) TONs and sending a message with the rest
const int reserve::leave_bbalance_minus_this_amount = 13;

;; But there are more avaliable modes to pass:
;; 4 -> 6, 5 -> 7, 8 -> 10, 9 -> 11, 12 -> 14, 13 -> 15
;;
;;     adding 2 to them will just disable errors
;;     in action phase if balance is not enough
